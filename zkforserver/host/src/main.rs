// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use clap::Parser;
use methods::{GUEST2_ELF, GUEST2_ID};
use rand::Rng;
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use std::fs;
use std::io::Write;
use std::time::Instant;
use zkcore::{Inputs, Outputs};
#[derive(Parser)]
struct Cli {
    #[arg()]
    path: String,
}
//define a command line
fn main() {
    let start = Instant::now();
    println!("{:?}", start); //begin time
    let args = Cli::parse();
    let datapath = args.path.as_str();
    let filedata = fs::read(datapath).unwrap(); //read chunk data

    let mut rng = rand::thread_rng();
    let key: [u8; 32] = rng.gen();
    let nonce: [u8; 12] = rng.gen(); //get random key and nonce

    let input = Inputs {
        data: filedata,
        key: key,
        nonce: nonce,
    };
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    println!("guestid: {:?}", GUEST2_ID);
    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, GUEST2_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let bytes = bincode::serialize(&receipt).unwrap();
    let mut receiptfile = fs::File::create("Receipt").unwrap();
    receiptfile.write(&bytes).unwrap(); //write the serialized data bytes into a new file
    let receipt2: Receipt = bincode::deserialize(&bytes).unwrap(); //read receipt file from a file

    let output: Outputs = receipt2.journal.decode().unwrap();
    println!("1{}", output.cid);
    println!("2{}", output.hashsk);
    println!("3{}", output.ct[2]);
    println!("4{:?}", output.nonce);
    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(GUEST2_ID).unwrap();
    receipt2.verify(GUEST2_ID).unwrap();
    let duration = start.elapsed();
    println!("Time taken: {:?}", duration);
}
